services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: rasa_postgres
    environment:
      POSTGRES_DB: rasa_chatbot
      POSTGRES_USER: rasa_user
      POSTGRES_PASSWORD: rasa_password_2024
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
      - ./database/init-platform-tables.sql:/docker-entrypoint-initdb.d/02-init-platform-tables.sql:ro
    ports:
      - "5432:5432"
    networks:
      - rasa_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rasa_user -d rasa_chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Servidor de acciones de Rasa
  rasa-action-server:
    build:
      context: .
      dockerfile: Dockerfile.actions
    container_name: rasa_action_server
    environment:
      - DATABASE_URL=postgresql://rasa_user:rasa_password_2024@postgres:5432/rasa_chatbot
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=rasa_chatbot
      - DB_USER=rasa_user
      - DB_PASSWORD=rasa_password_2024
    ports:
      - "5055:5055"
    networks:
      - rasa_network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./actions:/app/actions
    restart: unless-stopped

  # Servidor principal de Rasa
  rasa-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rasa_server
    environment:
      - DATABASE_URL=postgresql://rasa_user:rasa_password_2024@postgres:5432/rasa_chatbot
    ports:
      - "5005:5005"
    networks:
      - rasa_network
    depends_on:
      postgres:
        condition: service_healthy
      rasa-action-server:
        condition: service_started
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./domain.yml:/app/domain.yml
      - ./config.yml:/app/config.yml
      - ./endpoints.yml:/app/endpoints.yml
      - ./credentials.yml:/app/credentials.yml
    restart: unless-stopped
    command: ["run", "--enable-api", "--cors", "*", "--endpoints", "endpoints.yml", "--credentials", "credentials.yml", "--debug"]

  # Bot de Telegram (conexi칩n via API REST a RASA)
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile.telegram
    container_name: rasa_telegram_bot
    networks:
      - rasa_network
    depends_on:
      - rasa-server
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - RASA_URL=${RASA_URL}

  # Redis - Cache y message broker para Celery
  redis:
    image: redis:7-alpine
    container_name: rasa_redis
    ports:
      - "6379:6379"
    networks:
      - rasa_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    volumes:
      - redis_data:/data

  # API Backend - FastAPI
  api-server:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: rasa_api_server
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://rasa_user:rasa_password_2024@postgres:5432/rasa_chatbot
      - REDIS_URL=redis://redis:6379/0
      - RASA_URL=http://rasa-server:5005
    ports:
      - "8000:8000"
    networks:
      - rasa_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./api:/app
      - ./data:/rasa_data
      - ./models:/rasa_models
      - ./backups:/backups
    restart: unless-stopped

  # Celery Worker - Async task processing
  celery-worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: rasa_celery_worker
    command: celery -A tasks.celery_app worker --loglevel=info
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://rasa_user:rasa_password_2024@postgres:5432/rasa_chatbot
      - REDIS_URL=redis://redis:6379/0
    networks:
      - rasa_network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./api:/app
      - ./data:/rasa_data
      - ./models:/rasa_models
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Para ejecutar docker exec
    restart: unless-stopped

  # Flower - Monitoring de Celery (opcional)
  flower:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: rasa_flower
    command: celery -A tasks.celery_app flower --port=5555
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    networks:
      - rasa_network
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped

  # Training Platform Frontend - Streamlit
  training-platform:
    build:
      context: ./training_platform
      dockerfile: Dockerfile
    container_name: rasa_training_platform
    env_file:
      - .env
    environment:
      - API_URL=http://api-server:8000
      - RASA_URL=http://rasa-server:5005
    ports:
      - "8501:8501"
    networks:
      - rasa_network
    depends_on:
      - api-server
    volumes:
      - ./training_platform:/app
    restart: unless-stopped

  # Portainer - Administraci칩n gr치fica de contenedores Docker
  portainer:
    image: portainer/portainer-ce:2.19.4
    container_name: rasa_portainer
    command: -H unix:///var/run/docker.sock
    restart: unless-stopped
    ports:
      - "9000:9000"    # Puerto HTTP
      - "9443:9443"    # Puerto HTTPS (recomendado)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - rasa_network
    environment:
      # Permitir acceso HTTP (opcional, HTTPS es m치s seguro)
      - PORTAINER_HTTP_DISABLED=false

volumes:
  postgres_data:
    driver: local
    labels:
      - "project=rasa-chatbot"

  redis_data:
    driver: local
    labels:
      - "project=rasa-chatbot"

  # Volumen para persistir datos de Portainer
  portainer_data:
    driver: local
    labels:
      - "project=rasa-chatbot"

networks:
  rasa_network:
    driver: bridge
    labels:
      - "project=rasa-chatbot"